{"version":3,"sources":["components/chartCreator.js","helper/numberGenerator.js","components/binarySearch.js","components/linearSearch.js","components/navBar.js","pages/App.js","index.js"],"names":["getHorizontalPosition","amount","position","getHeight","value","BarCreator","props","useState","numbers","setNumbers","useEffect","className","width","height","aria-labelledby","role","Object","values","map","item","key","fill","selected","found","fillFound","fillSelected","grayedOut","fillGrayedOut","fillNonSelected","y","x","attributeName","from","to","dur","generateRandomNumbers","a","numberArray","Array","keys","forEach","j","Math","floor","random","tempNumbers","generateSortedNumbers","BinarySearch","targetNumber","setTargetNumber","numberRange","setNumberRange","sliderValue","setSliderValue","then","id","maxValue","minValue","onChange","onChangeComplete","min","max","type","onClick","doBinarySearch","startIndex","endIndex","target","backup","setTimeout","middleNumber","LinearSearch","doLinearSearch","NavBar","useGlobal","setViewPage","App","viewPage","setGlobal","page","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41c03f07.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst getHorizontalPosition = (amount, position) => {\n  return position * (100 / amount);\n};\n\nconst getWidth = amount => {\n  return (1 / amount) * 100 + \"%\";\n};\n\nconst getHeight = (value, amount) => {\n  return (value / amount) * 100 + \"%\";\n};\n\nconst BarCreator = props => {\n  const [numbers, setNumbers] = useState([]);\n\n  useEffect(() => {\n    setNumbers(props.numbers);\n  }, [props.numbers]);\n\n  return (\n    <svg\n      className=\"chart\"\n      width=\"100%\"\n      height=\"20%\"\n      aria-labelledby=\"title desc\"\n      role=\"img\"\n    >\n      {numbers\n        ? Object.values(numbers).map((item, key) => {\n            return (\n              <g className=\"bar\" key={key}>\n                <rect\n                  width={getWidth(props.amount)}\n                  height={getHeight(item.value, props.amount)}\n                  fill={\n                    item.selected\n                      ? item.found\n                        ? props.fillFound\n                        : props.fillSelected\n                      : item.grayedOut\n                      ? props.fillGrayedOut\n                      : props.fillNonSelected\n                  }\n                  y=\"0%\"\n                  x={getHorizontalPosition(props.amount, key) + \"%\"}\n                >\n                  <animate\n                    attributeName=\"height\"\n                    from=\"0\"\n                    to={getHeight(item.value, props.amount)}\n                    dur=\"0.5s\"\n                    fill=\"freeze\"\n                  />\n                </rect>\n              </g>\n            );\n          })\n        : null}\n    </svg>\n  );\n};\n\nexport default BarCreator;\n","export const generateRandomNumbers = async amount => {\n  let numberArray = [...Array(amount).keys()];\n\n  numberArray.forEach((key, value) => {\n    const j = Math.floor(Math.random() * key);\n    numberArray[key] = numberArray[j];\n    numberArray[j] = value;\n  });\n\n  let tempNumbers = {};\n\n  numberArray.forEach((key, value) => {\n    tempNumbers = {\n      ...tempNumbers,\n      [key + 1]: { value: value + 1, selected: false, found: false }\n    };\n  });\n\n  return tempNumbers;\n};\n\nexport const generateSortedNumbers = async amount => {\n  let numberArray = [...Array(amount).keys()];\n  let tempNumbers = {};\n\n  numberArray.forEach((key, value) => {\n    tempNumbers = {\n      ...tempNumbers,\n      [key + 1]: { value: value + 1, selected: false, found: false }\n    };\n  });\n\n  return tempNumbers;\n};\n","import RNI from \"@deberoppa/react-numeric-input\";\nimport React, { useEffect, useState } from \"react\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\nimport BarCreator from \"../components/chartCreator\";\nimport { generateSortedNumbers } from \"../helper/numberGenerator\";\n\nconst BinarySearch = () => {\n  const [numbers, setNumbers] = useState({});\n  const [targetNumber, setTargetNumber] = useState(1);\n  const [numberRange, setNumberRange] = useState(100);\n  const [sliderValue, setSliderValue] = useState(100);\n\n  const doBinarySearch = (startIndex, endIndex, target, backup) => {\n    setTimeout(() => {\n      let middleNumber = Math.floor((startIndex + endIndex) / 2);\n      if (numbers[middleNumber].value === target) {\n        setNumbers({\n          ...backup,\n          [middleNumber]: {\n            value: numbers[middleNumber].value,\n            selected: true,\n            found: true\n          }\n        });\n      } else {\n        setNumbers({\n          ...backup,\n          [middleNumber]: {\n            value: numbers[middleNumber].value,\n            selected: true,\n            found: false\n          }\n        });\n        if (numbers[middleNumber].value < target) {\n          doBinarySearch(middleNumber + 1, endIndex, target, backup);\n        } else {\n          doBinarySearch(startIndex, middleNumber - 1, target, backup);\n        }\n      }\n      return;\n    }, 200);\n  };\n\n  useEffect(() => {\n    generateSortedNumbers(numberRange).then(numbers => setNumbers(numbers));\n  }, [numberRange]);\n\n  return (\n    <div className=\"App\" id=\"binarySearch\">\n      <BarCreator\n        amount={numberRange}\n        numbers={numbers}\n        fillNonSelected=\"#265920\"\n        fillSelected=\"#625b1a\"\n        fillFound=\"#4d8621\"\n        fillGrayedOut=\"#6a6a6a2b\"\n      />\n      <div>\n        <h2>Binary Search</h2>\n        <div className=\"controls\">\n          <div>\n            <div>\n              <p>Number Pool:</p>\n              <InputRange\n                maxValue={250}\n                minValue={2}\n                value={sliderValue}\n                onChange={value => setSliderValue(value)}\n                onChangeComplete={value => setNumberRange(value)}\n              />\n            </div>\n          </div>\n          <div>\n            <div>\n              <RNI\n                className=\"rangeInput\"\n                min={1}\n                max={numberRange}\n                value={targetNumber}\n                onChange={value => setTargetNumber(value)}\n              />\n            </div>\n          </div>\n          <div>\n            <input\n              value={\"Find the number \" + targetNumber}\n              type=\"button\"\n              onClick={() =>\n                doBinarySearch(1, numberRange, targetNumber, numbers)\n              }\n            />\n          </div>\n          <div>\n            <input\n              value=\"Reset!\"\n              type=\"button\"\n              onClick={() =>\n                generateSortedNumbers(numberRange).then(numbers =>\n                  setNumbers(numbers)\n                )\n              }\n            />\n          </div>\n        </div>\n        <div className=\"text\">\n          <p>\n            Binary search adds a bit more complexity compared to the linear\n            search but it pays off with a performance boost. The binary seach is\n            done by searching a sorted array by repeatedly dividing the search\n            interval in half. Begin with an interval covering the whole array.\n            If the value of the search key is less than the item in the middle\n            of the interval, the interval is lowered to the lower half.\n            Otherwise it is narrowed to the upper half. Repeatedly check until\n            the value is found or the interval is empty.\n          </p>\n          <b>Pros:</b>\n          <ul>\n            <li>Good complexity with O(log(n))</li>\n            <li>High performance</li>\n          </ul>\n          <b>Cons:</b>\n          <ul>\n            <li>Bit more complicated to implement</li>\n            <li>Searching data has to be sorted</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BinarySearch;\n","import RNI from \"@deberoppa/react-numeric-input\";\nimport React, { useEffect, useState } from \"react\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\nimport BarCreator from \"../components/chartCreator\";\nimport { generateRandomNumbers } from \"../helper/numberGenerator\";\n\nconst LinearSearch = props => {\n  const [numbers, setNumbers] = useState({});\n  const [targetNumber, setTargetNumber] = useState(1);\n  const [numberRange, setNumberRange] = useState(100);\n  const [sliderValue, setSliderValue] = useState(100);\n\n  const doLinearSearch = (startIndex, target, backup) => {\n    setTimeout(() => {\n      if (numbers[startIndex].value === target) {\n        setNumbers({\n          ...backup,\n          [startIndex]: {\n            value: numbers[startIndex].value,\n            selected: true,\n            found: true\n          }\n        });\n        return;\n      } else {\n        setNumbers({\n          ...backup,\n          [startIndex]: {\n            value: numbers[startIndex].value,\n            selected: true,\n            found: false\n          }\n        });\n        doLinearSearch(startIndex + 1, target, backup);\n      }\n    }, 100);\n  };\n\n  useEffect(() => {\n    generateRandomNumbers(numberRange).then(numbers => setNumbers(numbers));\n  }, [numberRange]);\n\n  return (\n    <div className=\"App\" id=\"linearSearch\">\n      <BarCreator\n        amount={numberRange}\n        numbers={numbers}\n        fillNonSelected=\"#303d6c\"\n        fillSelected=\"#625b1a\"\n        fillFound=\"#4d8621\"\n      />\n      <div>\n        <h2>Linear Search</h2>\n        <div className=\"controls\">\n          <div>\n            <div>\n              <p>Number Pool:</p>\n              <InputRange\n                maxValue={250}\n                minValue={2}\n                value={sliderValue}\n                onChange={value => setSliderValue(value)}\n                onChangeComplete={value => setNumberRange(value)}\n              />\n            </div>\n          </div>\n          <div>\n            <div>\n              <RNI\n                className=\"rangeInput\"\n                min={1}\n                max={numberRange}\n                value={targetNumber}\n                onChange={value => setTargetNumber(value)}\n              />\n            </div>\n          </div>\n          <div>\n            <input\n              value={\"Find the number \" + targetNumber}\n              type=\"button\"\n              onClick={() => doLinearSearch(1, targetNumber, numbers)}\n            />\n          </div>\n          <div>\n            <input\n              value=\"Shuffle Numbers!\"\n              type=\"button\"\n              onClick={() =>\n                generateRandomNumbers(numberRange).then(numbers =>\n                  setNumbers(numbers)\n                )\n              }\n            />\n          </div>\n        </div>\n        <div className=\"text\">\n          <p>\n            Linear Search is one of the slowest if not the slowest search\n            algorithm. Each item in an unsorted array is passed sequentally and\n            checked against the target value. The time complexity of the\n            algorithm is therefore O(n). Linear search is rarely used\n            practically because other search algorithms such as the binary\n            search algorithm and hash tables allow significantly faster\n            searching comparison to Linear search.\n          </p>\n          <b>Pros:</b>\n          <ul>\n            <li>Very easy to implement</li>\n            <li>No sorting is necessary prior searching </li>\n          </ul>\n          <b>Cons:</b>\n          <ul>\n            <li>Bad time complexity O(n)</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LinearSearch;\n","import React, { useGlobal } from \"reactn\";\nimport BinarySearch from \"./binarySearch\";\nimport LinearSearch from \"./linearSearch\";\n\nconst NavBar = props => {\n  const [viewPage, setViewPage] = useGlobal(\"page\");\n\n  return (\n    <div id=\"navBar\">\n      <div className=\"navBarItem\" onClick={() => setViewPage(<LinearSearch />)}>\n        Linear Search\n      </div>\n      <div className=\"navBarItem\" onClick={() => setViewPage(<BinarySearch />)}>\n        Binary Search\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, { useEffect, useGlobal } from \"reactn\";\nimport NavBar from \"../components/navBar\";\nimport \"../style/App.css\";\n\nconst App = () => {\n  const [viewPage] = useGlobal(\"page\");\n\n  useEffect(() => {}, [viewPage]);\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      {viewPage}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App\";\nimport \"./style/index.css\";\nimport { setGlobal } from \"reactn\";\nimport LinearSearch from \"./components/linearSearch\";\n\nsetGlobal({\n  numbers: {},\n  page: <LinearSearch />\n});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}